import random

class Card:
    def __init__(self, color, value):
        self.color = color
        self.value = value

class UnoDeck:
    init_colors = ['Red', 'Yellow', 'Green', 'Blue']
    init_values = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'Skip', 'Draw 2']
    special_cards = ['Draw 4', 'Wild']

    def __init__(self):
        self.deck = [Card(color, value) for color in self.init_colors for value in self.init_values] + \
                    [Card('Black', value) for value in self.special_cards]

    def shuffle_deck(self):
        random.shuffle(self.deck)

    def deal_cards(self, num_players):
        hands = [[] for _ in range(num_players)]
        for _ in range(7):
            for hand in hands:
                hand.append(self.deck.pop())
        return hands

class UnoGame:
    def __init__(self):
        print("Welcome to the Uno Simulator game!")
        self.deck = UnoDeck()
        self.deck.shuffle_deck()
        self.players = self.get_num_players()
        self.hands = self.deck.deal_cards(self.players)
        self.pile = self.deck.deck.pop()

    def get_num_players(self):
        while True:
            try:
                num_players = int(input("Enter the number of players (2 to 4): "))
                if 2 <= num_players <= 4:
                    return num_players
                else:
                    print("Invalid input. Please enter a number between 2 and 4.")
            except ValueError:
                print("Invalid input. Please enter a valid number.")

    def display_hand(self, player_hand):
        print("Your current hand:")
        for i, card in enumerate(player_hand, start=1):
            print(f"{i}. {card.color} {card.value}")

    def special_cards(self, chosen_card):
        if chosen_card.value == 'Skip':
            print("The following player is skipped and loses their turn.")
        elif chosen_card.value == 'Draw 2':
            print("The following player draws 2 cards.")
            self.generate_cards(player, 2)
        elif chosen_card.value == 'Draw 4':
            print("The following player draws 4 cards.")
            self.generate_cards(player, 4)
        elif chosen_card.value == 'Wild':
            chosen_color = input("Choose the new color (Red, Yellow, Green, Blue): ").capitalize()
            while chosen_color not in UnoDeck.init_colors:
                print("Invalid color choice. Please choose Red, Yellow, Green, or Blue.")
                chosen_color = input("Choose the new color (Red, Yellow, Green, Blue): ").capitalize()
            chosen_card.color = chosen_color
            print(f"Wild card color changed to {chosen_color}.")

    def generate_cards(self, player, num_cards):
        init_colors = ['Red', 'Blue', 'Green', 'Yellow']
        random_color = random.choice(init_colors)
        random_num = random.randrange(1, 10)
        new_card = Card(random_color, random_num)
        
        if new_card.value == 'Draw 2':
            print(f"Player {player + 1} draws 2 cards.")
            self.draw_cards(player, 2)
        elif new_card.value == 'Draw 4':
            print(f"Player {player + 1} draws 4 cards.")
            self.draw_cards(player, 4)
        elif new_card.value == 'Wild':
            chosen_color = input("Choose the color for Wild (Red, Yellow, Green, Blue): ").capitalize()
            while chosen_color not in UnoDeck.init_colors:
                print("Invalid color choice. Please choose Red, Yellow, Green, or Blue.")
                chosen_color = input("Choose the color for Wild (Red, Yellow, Green, Blue): ").capitalize()
            new_card.color = chosen_color

        return new_card

    def draw_cards(self, player, num_cards):
        for _ in range(num_cards):
            self.hands[player].append(self.deck.deck.pop())
        print(f"Player {player + 1} drew {num_cards} cards.")

    def check_hand(self, player_hand):
        compatible_cards = [card for card in player_hand if card.color == self.pile.color or card.value == self.pile.value or card.value in UnoDeck.SPECIAL_CARDS]
        return compatible_cards

    def turn(self, player):
        players_turn_over = False
        print(f"\nPlayer {player + 1}'s turn:")
        current_player_hand = self.hands[player]
        print("Current Pile Card:", self.pile.color, self.pile.value)
        self.display_hand(current_player_hand)

        compatible_cards = self.check_hand(current_player_hand)

        while not players_turn_over:
            try:
                choice = int(input("Enter the number of the card you want to play: "))
                if 1 <= choice <= len(current_player_hand):
                    chosen_card = current_player_hand[choice - 1]
                    if chosen_card in compatible_cards or chosen_card.value in UnoDeck.SPECIAL_CARDS:
                        current_player_hand.remove(chosen_card)
                        self.pile = chosen_card
                        print(f"Player {player + 1} played {chosen_card.color} {chosen_card.value}.\n")
                        self.special_cards(chosen_card)
                        if chosen_card.value == 'Skip':
                            next_player = (player + 2) % self.players  # Skip the following player
                            print(f"Player {next_player + 1} is skipped.")
                        players_turn_over = True
                    else:
                        print("Invalid choice. The card does not match the color or value of the pile card.")
                else:
                    print("Invalid choice. Please enter a number within the range.")

            except ValueError:
                print("Invalid input. Please enter a valid number.")

        # Check if there are compatible cards after the player's turn
        if not self.check_hand(current_player_hand):
            print(f"No compatible cards. Drawing a card for Player {player + 1}.")
            self.draw_cards(player, 1)

    def play_game(self):
        print("Let the game begin!")
        while True:
            for player in range(self.players):
                self.turn(player)
                # Check for a winner
                if len(self.hands[player]) == 0:
                    print(f"Player {player + 1} wins!")
                    return

if __name__ == "__main__":
    uno_game = UnoGame()
    uno_game.play_game()
